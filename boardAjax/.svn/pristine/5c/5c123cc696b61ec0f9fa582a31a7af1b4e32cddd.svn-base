package com.lime.account.controller;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.lime.account.service.AccountService;
import com.lime.account.vo.AccountVO;
import com.lime.common.service.CommonService;
import com.lime.user.vo.UserVO;
import com.lime.util.CommUtils;

import egovframework.rte.psl.dataaccess.util.EgovMap;

@Controller
public class AccountController {


	@Resource(name = "jsonView")
	private MappingJackson2JsonView jsonView;

	@Resource(name="accountService")
	private AccountService accountService;

	@Resource(name="commonService")
	private CommonService commonService;
	

	/**
	 *
	 * @param searchVO - 조회할 정보가 담긴 SampleDefaultVO
	 * @param model
	 * @return "egovSampleList"
	 * @exception Exception
	 */
	
	//엑셀 파일 업로드 
/*	@RequestMapping(value = "/account/accountList.do")
	public String selectSampleList(HttpServletRequest request, ModelMap model) throws Exception {

		Map<String, Object> inOutMap = CommUtils.getFormParam(request);
		ArrayList<String> columns = new ArrayList<String>();
		String tbodyData = "";
		try {
            FileInputStream file = new FileInputStream("C:\\Users\\lime\\workspace\\boardAjax\\src\\main\\resources\\db\\CODEEXP.xlsx");
            XSSFWorkbook workbook = new XSSFWorkbook(file);
           
            int rowindex=0;
            int columnindex=0;
            //시트 수 (첫번째에만 존재하므로 0을 준다)
            //만약 각 시트를 읽기위해서는 FOR문을 한번더 돌려준다
            XSSFSheet sheet= workbook.getSheet("codeMaster");
            //행의 수
            int rows=sheet.getPhysicalNumberOfRows();
            for(rowindex=0;rowindex<rows;rowindex++){
                //행을읽는다
            	tbodyData += "<tr align=\'center\'>";
            	
                XSSFRow row=sheet.getRow(rowindex);
                if(row !=null){
                    //셀의 수
                    int cells=row.getPhysicalNumberOfCells();
                    for(columnindex=0; columnindex<=cells; columnindex++){
                    	// columnindex: 열 // rowindex: 행
                    	tbodyData += "<td style=\'text-align: center;\'>";
                        //셀값을 읽는다
                        XSSFCell cell=row.getCell(columnindex);
                        String value="";
                        //셀이 빈값일경우를 위한 널체크
                        if(cell==null){
                            continue;
                        }else{
                        		cell.setCellType(cell.CELL_TYPE_STRING);
                                value=cell.getStringCellValue()+"";
                        }
                        
                        if(rowindex == 0) columns.add(value);
                        else { // rowindex <= 1
                        	
                        	inOutMap.put(columns.get(columnindex), value);
                        }
                        tbodyData += value + "</td>";
                        System.out.println(rowindex+"번 행 : "+columnindex+"번 열 값은: "+value);
                    }
 
                }
                tbodyData += "</tr>";
            }
 
        }catch(Exception e) {
            e.printStackTrace();
        }
		
		model.put("tbodyData", tbodyData);
		model.put("inOutMap", inOutMap);
		return "/account/accountList";
	}
*/

	@RequestMapping(value = "/account/accountList.do")
	public String selectSampleList(HttpServletRequest request, ModelMap model,HttpSession session, UserVO userVO) throws Exception {

		Map<String, Object> inOutMap = CommUtils.getFormParam(request);
		
		UserVO user = (UserVO) request.getSession().getAttribute("user");
		
		model.put("inOutMap", inOutMap);
		return "/account/accountList";
	}

	/**
	 *
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/account/accountInsert.do")
	public String accountInsert(HttpServletRequest request, ModelMap model, HttpSession session) throws Exception{

		Map<String, Object> inOutMap = new HashMap<>();
		UserVO user = (UserVO) session.getAttribute("user");
		
		inOutMap.put("category", "A000000");
		List<EgovMap> resultMap= commonService.selectCombo(inOutMap);

		System.out.println(resultMap);
		model.put("resultMap", resultMap);

		return "/account/accountInsert";
	}
	
	@RequestMapping(value="/account/accountInsert/category.do")
	public String accountInsertCategory( HttpServletRequest request, HttpSession session , AccountVO accountVO) throws Exception{
		UserVO user = (UserVO) session.getAttribute("user");
		return "/account/accountInsert/category";
	}


	/**
	 *
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/account/selectCombo.do")
	public ModelAndView ajaxtest(HttpServletRequest request,HttpSession session) throws Exception{
		System.out.println("/account/selectCombo.do");
		UserVO user = (UserVO) session.getAttribute("user");
		Map<String, Object> inOutMap  = CommUtils.getFormParam(request);

		commonService.selectCombo(inOutMap);


		return new ModelAndView(jsonView, inOutMap);
	}
	


}// end of calss
